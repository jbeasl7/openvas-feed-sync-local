# SPDX-FileCopyrightText: 2025 Greenbone AG
# Some text descriptions might be excerpted from (a) referenced
# source(s), and are Copyright (C) by the respective right holder(s).
#
# SPDX-License-Identifier: GPL-2.0-only

CPE = "cpe:/a:python:python";

if(description)
{
  script_oid("1.3.6.1.4.1.25623.1.0.171264");
  script_version("2025-03-05T05:38:53+0000");
  script_tag(name:"last_modification", value:"2025-03-05 05:38:53 +0000 (Wed, 05 Mar 2025)");
  script_tag(name:"creation_date", value:"2025-03-04 13:27:36 +0000 (Tue, 04 Mar 2025)");
  script_tag(name:"cvss_base", value:"2.1");
  script_tag(name:"cvss_base_vector", value:"AV:N/AC:H/Au:S/C:P/I:N/A:N");

  script_cve_id("CVE-2025-1795");

  script_tag(name:"qod_type", value:"executable_version");

  script_tag(name:"solution_type", value:"VendorFix");

  script_name("Python Improper Encoding of Output Vulnerability (Feb 2025) - Mac OS X");

  script_category(ACT_GATHER_INFO);

  script_copyright("Copyright (C) 2025 Greenbone AG");
  script_family("General");
  script_dependencies("gb_python_consolidation.nasl");
  script_mandatory_keys("python/mac-os-x/detected");

  script_tag(name:"summary", value:"Python is prone to an improper encoding of output
  vulnerability.");

  script_tag(name:"vuldetect", value:"Checks if a vulnerable version is present on the target host.");

  script_tag(name:"insight", value:"During an address list folding when a separating comma ends up
  on a folded line and that line is to be unicode-encoded then the separator itself is also
  unicode-encoded. Expected behavior is that the separating comma remains a plan comma. This can
  result in the address header being misinterpreted by some mail servers.");

  # nb: One of the referenced pulls was integrated in 3.11.9 and one in 3.11.10,
  # therefore the later was used as fix for 3.11.x branch.
  script_tag(name:"affected", value:"Python versions prior to 3.11.10 and 3.12.x prior to 3.12.4.");

  script_tag(name:"solution", value:"Update to version 3.11.10, 3.12.4 or later.");

  script_xref(name:"URL", value:"https://mail.python.org/archives/list/security-announce@python.org/thread/MB62IZMEC3UM6SGHP5LET5JX2Y7H4ZUR/");
  script_xref(name:"URL", value:"https://github.com/python/cpython/issues/100884");
  script_xref(name:"URL", value:"https://github.com/python/cpython/pull/100885");
  script_xref(name:"URL", value:"https://github.com/python/cpython/pull/119099");
  script_xref(name:"URL", value:"https://github.com/python/cpython/commit/09fab93c3d857496c0bd162797fab816c311ee48");
  script_xref(name:"URL", value:"https://github.com/python/cpython/commit/70754d21c288535e86070ca7a6e90dcb670b8593");
  script_xref(name:"URL", value:"https://github.com/python/cpython/commit/9148b77e0af91cdacaa7fe3dfac09635c3fe9a74");
  script_xref(name:"URL", value:"https://docs.python.org/3.12/whatsnew/changelog.html#python-3-12-4-final");
  script_xref(name:"URL", value:"https://docs.python.org/3.11/whatsnew/changelog.html#python-3-11-10-final");
  script_xref(name:"URL", value:"https://osv.dev/vulnerability/PSF-2025-3");

  exit(0);
}

include("host_details.inc");
include("version_func.inc");

if (isnull(port = get_app_port(cpe: CPE)))
  exit(0);

if (!infos = get_app_version_and_location(cpe: CPE, port: port, exit_no_version: TRUE,
                                          version_regex: "^[0-9]+\.[0-9]+\.[0-9]+"))
  exit(0);

version = infos["version"];
location = infos["location"];

if (version_is_less(version: version, test_version: "3.11.10")) {
  report = report_fixed_ver(installed_version: version, fixed_version: "3.11.10", install_path: location);
  security_message(port: port, data: report);
  exit(0);
}

if (version_in_range_exclusive(version: version, test_version_lo: "3.12", test_version_up: "3.12.4")) {
  report = report_fixed_ver(installed_version: version, fixed_version: "3.12.4", install_path: location);
  security_message(port: port, data: report);
  exit(0);
}

exit(99);
