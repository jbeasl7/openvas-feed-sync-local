# SPDX-FileCopyrightText: 2025 Greenbone AG
# Some text descriptions might be excerpted from (a) referenced
# source(s), and are Copyright (C) by the respective right holder(s).
#
# SPDX-License-Identifier: GPL-2.0-only

# ------------------------------------------------------------------
# METADATA
# ------------------------------------------------------------------

if(description)
{
  script_oid("1.3.6.1.4.1.25623.1.0.130372");
  script_version("2025-09-19T15:40:40+0000");
  script_tag(name:"last_modification", value:"2025-09-19 15:40:40 +0000 (Fri, 19 Sep 2025)");
  script_tag(name:"creation_date", value:"2025-05-07 11:44:21 +0000 (Wed, 07 May 2025)");
  script_tag(name:"cvss_base", value:"0.0");
  script_tag(name:"cvss_base_vector", value:"AV:L/AC:H/Au:S/C:N/I:N/A:N");
  script_tag(name:"qod", value:"97");

  script_name("Configure The ntpd Service Properly");

  script_category(ACT_GATHER_INFO);
  script_copyright("Copyright (C) 2025 Greenbone AG");
  script_family("Policy");
  script_dependencies("compliance_tests.nasl", "gather-package-list.nasl");
  script_mandatory_keys("Compliance/Launch", "ssh/login/euleros_eulerosvirtual_openeuler_hce");

  script_xref(name:"Policy", value:"EulerOS Baseline: Security Committee Benchmark (v1.0.0): 3. Running and Services: 3.6 Time Synchronization: 3.6.1 Configure The ntpd Service Properly (Recommendation)");
  script_xref(name:"Policy", value:"EulerOS Virtual: Security Committee Benchmark (v1.0.0): 3. Running and Services: 3.6 Time Synchronization: 3.6.1 Configure The ntpd Service Properly (Recommendation)");
  script_xref(name:"Policy", value:"HCE Linux (Huawei Cloud EulerOS): Security Committee Benchmark (v1.0.0): 3. Running and Services: 3.6 Time Synchronization: 3.6.1 Configure The ntpd Service Properly (Recommendation)");
  script_xref(name:"Policy", value:"openEuler Baseline: Security Committee Benchmark (v1.0.0): 3. Running and Services: 3.6 Time Synchronization: 3.6.1 Configure The ntpd Service Properly (Recommendation)");

  script_tag(name:"summary", value:"In the cluster scenario, the time of servers must be accurate
and consistent. For example, if the server time is inconsistent, the data generated by different
servers may be sorted or compared inaccurately.

Even if you run the date command to set the time of all servers to the same value, the time of the
servers may be inaccurate or inconsistent as the time goes by. Therefore, to ensure that the time
of all servers in the environment is synchronized and accurate, a time server that can be
synchronized must be available. Other servers in the network synchronize time with the time server.

When the ntpd service is used to implement time synchronization but the ntpd service is not
configured properly, the server time may be inaccurate. As a result, the time of different servers
may be inconsistent.

Inaccurate server time brings serious problems to time-sensitive data such as finance and order
data. For example, due to inaccurate server time, a piece of accounting data may fall in other
financial period, resulting in an incorrect ending balance in the balance sheet.

If the time of servers is inconsistent, the time of packets generated by each server is different.
If data flows derived from multiple servers are processed in a certain sequence and the time of the
server in the next phase is earlier than that of the previous server, the received packets may be
discarded because the time of the received packets is later than the local time.");

  exit(0);
}

include("policy_functions.inc");
include("ssh_func.inc");
include("host_details.inc");
include("policy_reporting_module.inc");

title = "Configure The ntpd Service Properly";

solution = '1. Configure the local device as the time source and add the NTP permission control
configuration to the /etc/ntp.conf file.

# vim /etc/ntp.conf
restrict <IP or netmask_IP> <parameter>

- IP or netmask_IP: IP address for permission control. The value can be default, indicating all IP
addresses<semicolon> a specific IP address without a mask, for example, 192.168.1.2or an IP address
with a mask, indicating an IP address range, for example, 192.168.0.0 mask 255.255.255.0 (servers
with IP addresses ranging from 192.168.0.1 to 192.168.0.154 can connect to this server to obtain
the NTP service).
-  parameter: parameter for permission control.
-  For example, restrict default nomodify notrap nopeer noquery indicates that servers with any IP
addresses can synchronize time with the local device functioning as the time source, but services
cannot be queried or modified in the system.

2. Add the following configuration to the /etc/ntp.conf file to configure the time server
(remote-server indicates the IP address of the remote time server) for the local device functioning
as the client:

# vim /etc/ntp.conf
server <remote-server>

3. After the preceding two configurations are complete, run the service ntpd restart command to
restart the ntpd service. (The two configurations can be performed at the same time. That is, the
local host functions as a client to obtain time from a remote server or as a server to synchronize
other servers.)
# service ntpd restart';

check_type = "SSH_Cmd";

action = '1. Run the command in the terminal:
# service ntpd status 2>&1 | grep Active

2. Run the command in the terminal:
# grep "^restrict" /etc/ntp.conf

3. Run the command in the terminal:
# grep -E "^(server|pool)" /etc/ntp.conf';

expected_value = '1. The output should be equal to "Active: active (running)"
2. The output should be equal to "restrict default nomodify notrap nopeer noquery"
3. The output should be equal to "server <IP or domain name> iburst"';

# ------------------------------------------------------------------
# CONNECTION CHECK
# ------------------------------------------------------------------

if(!get_kb_item("login/SSH/success") || !sock = ssh_login_or_reuse_connection()){

  report_ssh_error(title: title,
                   solution: solution,
                   action: action,
                   expected_value: expected_value,
                   check_type: check_type);
  exit(0);
}

overall_pass = FALSE;
actual_value = "";

# ------------------------------------------------------------------
# CHECK 1 :  Verify command `service ntpd status 2>&1 | grep Active`
# ------------------------------------------------------------------

step_cmd_check_1 = 'service ntpd status 2>/dev/null | grep -e "[a]ctive (running)"';
step_res_check_1 = ssh_cmd(socket:sock, cmd:step_cmd_check_1, return_errors:TRUE, return_linux_errors_only:TRUE);
actual_value += '1. ' + step_res_check_1 + '\n';
check_result_1 = FALSE;

if(step_res_check_1){
  check_result_1 = TRUE;
}

# ------------------------------------------------------------------
# CHECK 2 :  Verify command `grep "^restrict" /etc/ntp.conf`
# ------------------------------------------------------------------

step_cmd_check_2 = 'grep "^\\s*restrict" /etc/ntp.conf 2>/dev/null';
step_res_check_2 = ssh_cmd(socket:sock, cmd:step_cmd_check_2, return_errors:TRUE, return_linux_errors_only:TRUE);
actual_value += '2. ' + step_res_check_2 + '\n';
check_result_2 = FALSE;

if(step_res_check_2){
  check_result_2 = TRUE;
}

# ------------------------------------------------------------------
# CHECK 3 :  Verify command `grep -E "^(server|pool)" /etc/ntp.conf`
# ------------------------------------------------------------------

step_cmd_check_3 = 'grep -E "^\\s*(server|pool)" /etc/ntp.conf 2>/dev/null';
step_res_check_3 = ssh_cmd(socket:sock, cmd:step_cmd_check_3, return_errors:TRUE, return_linux_errors_only:TRUE);
actual_value += '3. ' + step_res_check_3 + '\n';
check_result_3 = FALSE;

if(step_res_check_3){
  check_result_3 = TRUE;
}

# ------------------------------------------------------------------
# FINAL RESULT
# ------------------------------------------------------------------
if(check_result_1 && check_result_2 && check_result_3){
  overall_pass = TRUE;
}

if(overall_pass){
  compliant = "yes";
  comment = "All checks passed";
}else{
  compliant = "no";
  comment = "One or more checks failed";
}

# ------------------------------------------------------------------
# REPORT
# ------------------------------------------------------------------

report_audit(action: action,
             actual_value: actual_value,
             expected_value: expected_value,
             is_compliant: compliant,
             solution: solution,
             check_type: check_type,
             title: title,
             comment: comment);

exit(0);
